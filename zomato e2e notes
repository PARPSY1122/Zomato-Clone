Deploying Zomato Clone App with DevSecOps CI/CD

	deploying a React Js Zomato-clone.
	using Jenkins as a CICD tool and deploying our application on a Docker container.
	Steps:-

	Step 1 — Launch an Ubuntu(22.04) T2 Large Instance

	Step 2 — Install Jenkins, Docker and Trivy. Create a Sonarqube Container using Docker.
	
	Step 3 — Install Plugins like JDK, Sonarqube Scanner, Nodejs, and OWASP Dependency Check.

	Step 4 — Create a Pipeline Project in Jenkins using a Declarative Pipeline

	Step 5 — Install OWASP Dependency Check Plugins

	Step 6 — Docker Image Build and Push

	Step 7 — Deploy the image using Docker
	
	launch t2 large instance.In advanced details add this script for automatic jenkins start
	
	#!/bin/bash
	sudo apt update -y
	#sudo apt upgrade -y
	wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
	echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
	sudo apt update -y
	sudo apt install temurin-17-jdk -y
	/usr/bin/java --version
	curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
                  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
	echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
                  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
                              /etc/apt/sources.list.d/jenkins.list > /dev/null
	sudo apt-get update -y
	sudo apt-get install jenkins -y
	sudo systemctl start jenkins
	sudo systemctl status jenkins
	
	#Once Jenkins is installed, you will need to go to your AWS EC2 Security Group and open Inbound Port 8080, since Jenkins works on Port 8080.
	
	<EC2 Public IP Address:8080>
	sudo cat /var/lib/jenkins/secrets/initialAdminPassword
	
	#2B — Install Docker
	
	sudo apt-get update
	sudo apt-get install docker.io -y
	sudo usermod -aG docker $USER   #my case is ubuntu
	newgrp docker
	sudo chmod 777 /var/run/docker.sock
	
	After the docker installation, we create a sonarqube container (Remember to add 9000 ports in the security group).

	docker run -d --name sonar -p 9000:9000 sonarqube:lts-community
	
	Now our sonarqube is up and running
	
	Enter username and password, click on login and change password
	
	username:admin
	passwd:admin
	
	#2C — Install Trivy
	
	sudo apt-get install wget apt-transport-https gnupg lsb-release -y
	wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
	echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
	sudo apt-get update
	sudo apt-get install trivy -y
	
	Step 3 — Install Plugins like JDK, Sonarqube Scanner, NodeJs, OWASP Dependency Check
	
	#3A — Install Plugin
		
	Goto Manage Jenkins →Plugins → Available Plugins →

	Install below plugins

	1 → Eclipse Temurin Installer (Install without restart)

	2 → SonarQube Scanner (Install without restart)

	3 → NodeJs Plugin (Install Without restart)
	
	#3B — Configure Java and Nodejs in Global Tool Configuration
	
	Goto Manage Jenkins → Tools → Install JDK(17) and NodeJs(16)→ Click on Apply and Save
	
	#3C — Create a Job
	
	create a job as Zomato Name, select pipeline and click on ok.
	
	Step 4 — Configure Sonar Server in Manage Jenkins
	
			 Grab the Public IP Address of your EC2 Instance, Sonarqube works on Port 9000, so 
			 <Public IP>:9000. Goto your Sonarqube Server. 
			 Click on Administration → Security → Users → Click on Tokens and Update Token → Give it a name → and click on Generate Token

			copy Token

			Goto Jenkins Dashboard → Manage Jenkins → Credentials → Add Secret Text → Id(sonar-token) → discription(sonar-token)→ create.
				
			Now, go to Dashboard → Manage Jenkins → System and Add sonarqube server	→ name(sonar-server)→ <ip of localhost>:9000→authuntication(sonar-token).
			Click on Apply and SaveAdd DockerHub Username and Password under Global Credentials


			
			Add a sonar scanner in the tools.
			 Dashboard → Manage Jenkins → tools →add a sonarqube scanner→ name:sonar-scanner
			 Click on Apply and Save
			 
			In the Sonarqube Dashboard add a quality gate also

			Administration--> Configuration-->Webhooks --> Click on Create-->Add details
			#in url section of quality gate
			<http://jenkins-public-ip:8080>/sonarqube-webhook/
			
			create
			
			Let's go to our Pipeline and add the script in our Pipeline Script.
			
			
			pipeline{
				agent any
				tools{
					jdk 'jdk17'
					nodejs 'node16'
				}
				environment {
					SCANNER_HOME=tool 'sonar-scanner'
				}
				stages {
					stage('clean workspace'){
						steps{
							cleanWs()
						}
					}
				stage('Checkout from Git'){
					steps{
						git branch: 'main', url: 'https://github.com/PARPSY1122/Zomato-Clone.git'
					}
				}
				stage("Sonarqube Analysis "){
					steps{
						withSonarQubeEnv('sonar-server') {
							sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=zomato \
							-Dsonar.projectKey=zomato '''
						}
					}
				}
				stage("quality gate"){
					steps {
						script {
							waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
						}
					} 
				}
				stage('Install Dependencies') {
					steps {
						sh "npm install"
					}
				}
			}
		}
		
		Click on Build now.
		To see the report, you can go to Sonarqube Server and go to Projects.
		You can see the report has been generated and the status shows as passed.
		To see a detailed report, you can go to issues.
		
		Step 5 — Install OWASP Dependency Check Plugins
			GotoDashboard → Manage Jenkins → Plugins → OWASP Dependency-Check. Click on it and install it without restart.
			
			First, we configured the Plugin and next, we had to configure the Tool

			Goto Dashboard → Manage Jenkins → Tools → add dependency check → name(dp-check) → install frm git → Click on Apply and Save.
			
			Now go configure → Pipeline and add this stage to your pipeline and build.
			
		
		
		stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'dp-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

		will see that in status, a graph will also be generated and Vulnerabilities.
		
		Step 6 — Docker Image Build and Push
		
		We need to install the Docker tool in our system, 
		Goto Dashboard → Manage Plugins → Available plugins → Search for Docker and install these plugins
		
		Docker

		Docker Commons

		Docker Pipeline

		Docker API

		docker-build-step
		
		and click on install without restart
		
		Now, goto Dashboard → Manage Jenkins → Tools → add docker -> name (docker) -> install from dockerhub
		
		Add DockerHub Username and Password under Global Credentials
		
		Jenkins Dashboard → Manage Jenkins → Credentials → Add username & passwd → username(ajayreddy1122) → passwd(*********)→id (dockerhub) create.
		
		
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'dockerhub'){   
                       sh "docker build -t zomato ."
                       sh "docker tag zomato ajayreddy1122/zomato:latest "
                       sh "docker push ajayreddy1122/zomato:latest "
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image ajayreddy1122/zomato:latest > trivy.txt" 
            }
        }
		
		When you log in to Dockerhub, you will see a new image is created

		Now Run the container to see if the app coming up or not by adding the below pipeline in stage 
		
		stage('Deploy to container'){
     steps{
            sh 'docker run -d --name zomato -p 3000:3000 ajayreddy1122/zomato:latest'
          }
      }
	  
	  build now --> after successfull  build  
	  
	  goto --> web browser --> <Jenkins-public-ip:3000> search it 







			
			

